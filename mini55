void		signal_handler(void);
				t_pid_list **pid_list);
int			builtin_cd(char *path, char ***env_vars, int *last_exit_code);
int			builtin_pwd(char *args);
int			builtin_env(char *var_string, char ***env_vars);
int			builtin_echo(char *args, int out_fd, t_app_data *app);
void		builtin_exit(t_app_data *app, char *args);
int			builtin_unset(char *keys, char **env_vars);
int			builtin_export(char *var_string, char ***env_vars, int fd);
char		**init_envp(char **env_vars);
char		**update_env_vars(t_envvar **var, int *exit_code, char **env_vars);
void		unset_env_var(char *key, char ***env_vars);
int			unset_env_vars(char *keys_string, char ***env_vars);
t_envvar	**split_env_vars(char *envp);
t_envvar	*split_env_var(char *envp);
void		free_vars(t_envvar **vars);
bool		var_name_valid(char *key);
int			is_space(char c);
int			check_input(char *str);
char		**split(char *input);
char		*add_spaces(char *input);
int			is_operator(char c, char d);
char		*remove_quotes(char *str);
t_token		*switch_tokens_for_redir(t_token *tokens);
bool		rearrange_condition(t_token *current);
bool		before_first_condition(t_token *current);
				t_token **before_first);
void		rearrange_following_element(t_token **current, t_token **before_first);
t_treenode	*switch_heredocs(t_treenode *lintree);
// t_token		*tokenize(char *input);
t_token		*tokenize(char *input, int *exit_code);
t_token		*join_arg_tokens(t_token *tokens);
t_token		*join_after_echo(t_token *tokens);
t_token		*join_after_ls(t_token *tokens);
t_token		*remove_after_cd(t_token *tokens);
void		free_tokens(t_token *token);
t_tokentype	token_type(char *content, t_tokentype prev_type);
int			check_tokens_valid(t_token *tokens);
t_treenode	*build_ast(t_treenode *ast, t_treenode *lin_tree, int bracket_lvl);
t_treenode	*combine_cmds_args(t_token *tokens);
				t_tokentype cmd_type, int bracket_lvl);
void		free_treenodes(t_treenode *node);
void		debug_printtree(t_treenode *root, int tabs);
bool		node_is_operator(char *cmd);
int			priority(char *cmd, int bracket_lvl);
int			lexer(t_app_data *app_data);
int			execute(t_app_data *app, t_treenode *ast);
char		*expand(char *input, int exit_code, char **env_vars, int *flags);
int			handle_dollar(t_expand *data);
void		handle_quotes(char c, bool *s_quote, bool *d_quote);
int			get_new_size(char *input, int exit_code, char **env_vars, int *flags);
bool		match(char *pattern, char *string, bool s_quote, bool d_quote);
char		*get_pattern(char *input, int *i, int *position, int *start);
char		*remove_quotes_in_place(char *str);
char		*expand_and_remove(char *str, int exit_code, char **env_vars, int flag);
				char **env_vars, int flag);
char		*ft_getenv(char *name, char **env_vars);
int			is_valid_dollar(char *input, int i, bool *quotes);
